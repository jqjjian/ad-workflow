server {
    listen 80;
    server_name myad.shopwis.cn;
    
    # HTTP 跳转 HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name myad.shopwis.cn;
    
    # SSL 证书配置（使用宝塔自动生成的证书路径）
    ssl_certificate /www/server/panel/vhost/cert/myad.shopwis.cn/fullchain.pem;
    ssl_certificate_key /www/server/panel/vhost/cert/myad.shopwis.cn/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    
    # 安全加固配置
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:!MD5;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    add_header Strict-Transport-Security "max-age=31536000";
    
    # 静态文件缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        expires 7d;
        proxy_cache_valid 200 7d;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
    }
    
    # API路由配置 - 禁用缓存
    location /api/ {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 禁用缓存
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        add_header Pragma "no-cache";
        expires off;
        
        # 超时设置
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # 特殊处理静态资源
    location ^~ /_next/static/ {
        alias /www/wwwroot/myad.shopwis.cn/.next/static/;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
    }
    
    # 处理静态public目录
    location ^~ /public/ {
        alias /www/wwwroot/myad.shopwis.cn/public/;
        expires 30d;
        try_files $uri $uri/ =404;
    }
    
    # 处理根路径
    location = / {
        # 尝试首先使用static index.html
        try_files /public/index.html @nextjs;
    }
    
    # NextJS应用
    location @nextjs {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # 主要应用反向代理
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 关键：一定要设置为$host而不是127.0.0.1，否则会导致NextAuth验证失败
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 关键：必须与Host一致，否则会导致Server Actions安全验证失败
        proxy_set_header X-Forwarded-Host $host;
        
        # 特殊处理授权路由
        location ~ ^/api/auth/.* {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # 关闭缓存
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
            add_header Pragma "no-cache";
            expires off;
            
            # 特殊的安全头
            proxy_set_header x-nextjs-data 1;
            
            # 必要时增加超时
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
        }
        
        # 确保根路径请求正确处理
        proxy_intercept_errors on;
        
        # 防止缓存中间件响应
        proxy_cache_bypass $http_upgrade;
        
        # 增加超时，防止长请求超时
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
    }
    
    # 错误页面处理
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
} 