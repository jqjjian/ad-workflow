---
description: 
globs: 
alwaysApply: true
---
# Next.js 开发规范

本文档定义了基于 Next.js 框架的开发规范，包括 App Router、服务器组件与客户端组件的使用原则。

## 路由组织
- 使用 App Router 路由系统，遵循目录结构定义路由
- 合理使用路由分组（如 `(auth)`, `(dashboard)`）组织相关页面
- 路由层级不宜过深，避免超过 4 层嵌套
- 使用平行路由处理复杂布局和独立状态管理
- 使用拦截路由处理模态框和重叠 UI

## 服务器组件与客户端组件
- 默认使用服务器组件，仅在必要时使用客户端组件
- 客户端组件文件顶部添加 `'use client'` 指令
- 避免在服务器组件中导入客户端组件，应通过属性传递
- 将数据获取和业务逻辑放在服务器组件中处理
- 将交互逻辑和状态管理放在客户端组件中处理

## 数据获取
- 优先使用服务器组件进行数据获取
- 根据需求合理使用静态生成（SSG）和服务器渲染（SSR）
- 使用 `fetch` API 并合理设置缓存和重新验证策略
- 复杂数据处理逻辑应封装为独立函数或 React Server Actions
- 避免在客户端进行大量数据转换和处理

## 状态管理
- 客户端状态使用 React 钩子（如 `useState`, `useReducer`）
- 全局状态根据复杂度选择 Context API 或状态管理库
- 服务器状态使用 Server Actions 或数据库操作
- 避免不必要的全局状态，优先使用局部状态
- 使用 URL 参数存储可共享和可恢复的状态

## 性能优化
- 合理切分页面为多个组件，优化渲染性能
- 使用 `React.memo`, `useMemo`, `useCallback` 避免不必要渲染
- 懒加载非关键组件和大型依赖库
- 使用 `next/image` 和 `next/font` 优化资源加载
- 开启 ISR 或增量静态再生成以平衡性能和数据新鲜度

## 错误处理
- 使用 `error.tsx` 文件定义错误边界
- 使用 `not-found.tsx` 处理 404 错误
- 使用 `loading.tsx` 定义加载状态UI
- API 错误应返回合适的状态码和错误信息
- 客户端错误应使用 try/catch 结构并提供用户友好提示
